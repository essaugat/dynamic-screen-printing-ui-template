@use "sass:math";

/* ##### FONT IMPORTS ##### */
@mixin font-face($font-name, $file-path, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-path + ".eot");
    src: url($file-path + ".eot?#iefix") format("embedded-opentype"),
      url($file-path + ".woff2") format("woff2"),
      url($file-path + ".woff") format("woff"),
      url($file-path + ".ttf") format("truetype"),
      url($file-path + ".svg##{$font-name}") format("svg");
    font-weight: $weight; // default = normal (400)
    font-style: $style;
    font-display: swap;
    // swap: Instructs the browser to use the fallback font to display the text until the custom font has fully downloaded. This is also known as a “flash of unstyled text” or FOUT.
  }
}

/* ##### FLEXBOX TOOLKIT ##### */
@mixin flex-center {
  display: flex;
  @include align-items(center);
  @include justify-content(center);
}

@mixin inline-flex-center {
  display: inline-flex;
  @include align-content(center);
  @include justify-content(center);
}

@mixin flex-column {
  display: flex;
  @include flex-direction(column);
}

@mixin flex-center-column {
  @include flex-center;
  @include flex-direction(column);
}

@mixin flex-center-vert {
  display: flex;
  @include align-items(center);
}

@mixin flex-center-horiz {
  display: flex;
  @include align-items(center);
}

// mixins for media query
@mixin breakpoint-up($size) {
  @media (min-width: map-get($breakpoints-up, $size)) {
    @content;
  }
}

@mixin breakpoint-down($size) {
  @media (max-width: map-get($breakpoints-down, $size)) {
    @content;
  }
}

/* #### LIST #### */
@mixin list-reset {
  margin: 0;
  padding: 0;
  list-style-type: none;
}

// image
@mixin object-cover {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

// Extra mixins
@mixin css-triangle(
  $color,
  $direction,
  $size: 6px,
  $position: absolute,
  $round: false
) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round(math.div($size, 2.5));
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round(math.div($size, 2.5));
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

// The user-select property specifies whether the text of an element can be selected. In web browsers, if you double-click on some text it will be selected/highlighted. This property can be used to prevent this.
@mixin unselectable {
  -webkit-touch-callout: none;
  user-select: none;
}

// The ::selection CSS pseudo-element applies styles to the part of a document that has been highlighted by the user (such as clicking and dragging the mouse across text).
@mixin selection {
  ::-moz-selection {
    @content;
  }
  ::selection {
    @content;
  }
}

// Arrow with four optional directions
@mixin arrow($direction: down, $size: 5px, $color: #555) {
  width: 0;
  height: 0;
  @if ($direction == left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else if($direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if($direction == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}

// Hardware - Simple and effective for when you need to trigger hardware acceleration for some animation, keeping everything fast, slick and flicker-free.
@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }
  perspective: $perspective;
}
